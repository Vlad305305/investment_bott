import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)
logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

buttons = [
    [KeyboardButton(text="üß† –†–∞–∑–æ–±—Ä–∞—Ç—å –∏–¥–µ—é"), KeyboardButton(text="üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
    [KeyboardButton(text="üåê –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ"), KeyboardButton(text="üìã –ü–æ–º–æ—â—å")]
]
main_keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

user_tasks = {}

@dp.message(F.text == "/start")
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=main_keyboard)

@dp.message(F.text == "üß† –†–∞–∑–æ–±—Ä–∞—Ç—å –∏–¥–µ—é")
async def analyze_idea(message: Message):
    await message.answer("–û–ø–∏—à–∏ –∏–¥–µ—é –∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑—É ‚Äî —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –µ—ë –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –º—ã—à–ª–µ–Ω–∏—é.")

@dp.message(F.text == "üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_tasks(message: Message):
    user_id = message.from_user.id
    tasks = user_tasks.get(user_id, [])
    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        task_list = "\n".join(f"‚Äî {task}" for task in tasks)
        await message.answer(f"–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{task_list}")

@dp.message(F.text == "üåê –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ")
async def ask_web(message: Message):
    await message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏? –ù–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")

@dp.message(F.text == "üìã –ü–æ–º–æ—â—å")
async def help_menu(message: Message):
    await message.answer(
        "–Ø –º–æ–≥—É:\n‚Äî –†–∞–∑–±–∏—Ä–∞—Ç—å –∏–¥–µ–∏\n‚Äî –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n‚Äî –í–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±—É—é –≥–∏–ø–æ—Ç–µ–∑—É, –∏ –º—ã —Ä–∞–∑–±–µ—Ä—ë–º –µ—ë."
    )

@dp.message()
async def handle_general(message: Message):
    user_id = message.from_user.id
    user_tasks.setdefault(user_id, []).append(message.text)

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –≤ —Å—Ç–∏–ª–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è. –ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –∏–¥–µ—é."},
                {"role": "user", "content": message.text}
            ],
            max_tokens=800
        )
        answer = response.choices[0].message.content
    except Exception as e:
        answer = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    await message.answer(answer)

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
